# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <https://unlicense.org>
#


# revision @version@

declare -A pulse_type

# select which device types to load into pulseaudio
# outputs (speakers, headphones) are "sinks"
# inputs (microphones) are "sources"
# either comment out lines with unwanted types, or set value to "no"
pulse_type[a2dp_sink]=yes
pulse_type[a2dp_source]=yes
pulse_type[sco_sink]=yes
pulse_type[sco_source]=yes

# experiment with these values if you experience underruns/overruns
PULSE_FRAGMENTS=1
PULSE_FRAGMENT_MSEC=5

# change this if you wish to use a different icon
PULSE_ICON_NAME="bluetooth"

# an array to store pulseaudio module ids so they can be removed later
declare -A pulse_modules


pulse_shortopts="p::i:"
pulse_longopts="pulse::,icon:"

pulse_print_help() {
	cat <<-EOF
	  -p,--pulse     add connected pcms to pulseaudio
	                   - optional arg: [a2dp|sco][,[capture|playback]]
	                   - default is a2dp, both capture and playback
	  -i,--icon      icon to use for pulseaudio
	                   - default is bluetooth
	EOF
}

pulse_parse_types() {
	local IFS=','
	local temp=( $pulse_types )
	local word sink source a2dp sco
	for word in "${temp[@]}"; do
		case "$word" in
			'capture') source=1 ;;
			'playback') sink=1 ;;
			'a2dp') a2dp=1 ;;
			'sco') sco=1 ;;
			*) 
				echo "Invalid --default argument '$word'" >&2
				exit 1
				;;
		esac
	done
	[[ "$source" = 1 ]] && {
		[[ "$a2dp" = 1 ]] || pulse_type[a2dp_source]=no
		[[ "$sco" = 1 ]] || pulse_type[sco_source]=no
	}
	[[ "$sink" = 1 ]] && {
		[[ "$a2dp" = 1 ]] || pulse_type[a2dp_sink]=no
		[[ "$sco" = 1 ]] || pulse_type[sco_sink]=no
	}
}

pulse_init() {
 [[ "$pulse_types" ]] && pulse_parse_types
}

# add a pcm to PulseAudio
pulse_pcm_added() {
	declare -A pa_format
	pa_format[U8]=u8
	pa_format[S16_LE]=s16le
	pa_format[S24_LE]=s24le
	pa_format[S32_LE]=s32le

	declare -A sample_size
	sample_size[U8]=1
	sample_size[S16_LE]=2
	sample_size[S24_LE]=3
	sample_size[S32_LE]=4

	local profile=a2dp
	[[ "${bluealsa_new_pcm[profile]}" = HFP || "${bluealsa_new_pcm[profile]}" = HSP ]] && profile=sco
	local mode="${bluealsa_new_pcm[mode]}"
	[[ ${pulse_type[${profile}_${mode}]} = yes ]] || return

	local alias=$(bluealsa_get_alias "${bluealsa_new_pcm[device]}")
	[[ -n "$alias" ]] || return

	local addr="${bluealsa_new_pcm[addr]}"
	local device="bluealsa_raw:DEV=$addr,PROFILE=$profile"
	local name=bluealsa.$mode.${addr//:/_}.$profile
	local description="Bluetooth:\ ${alias// /\\ }\ ($profile)"
	local format=${pa_format[${bluealsa_new_pcm[format]}]}
	local sample_size=${sample_size[${bluealsa_new_pcm[format]}]}
	[[ -n "$format" ]] || return
	local channels="${bluealsa_new_pcm[channels]}"
	local rate="${bluealsa_new_pcm[rate]}"
	[[ "$rate" -eq 0 ]] && rate=8000
	local fragment_size=$(( $PULSE_FRAGMENT_MSEC * $sample_size * $channels * $rate / 1000 ))

	local module_id=$(pactl load-module "module-alsa-$mode" "format='$format'" "rate='$rate'" "channels='$channels'" "fragments='$PULSE_FRAGMENTS'" "fragment_size='$fragment_size'" "fixed_latency_range='true'" "device='$device'" "${mode}_name='$name'" "${mode}_properties=device.description='$description'device.icon_name=$PULSE_ICON_NAME")

	[[ -n "$module_id" ]] && pulse_modules[${bluealsa_new_pcm[id]}]=$module_id
}

# remove a device from PulseAudio
pulse_pcm_removed() {
	local module_id=${pulse_modules["$1"]}
	if [[ -n "$module_id" ]] ; then
		pactl unload-module $module_id 2>/dev/null
		unset pulse_modules["$1"]
	fi
}

# remove all PCMs if bluealsa service terminates
pulse_service_stopped() {
	local name
    for name in "${!pulse_modules[@]}" ; do
            pactl unload-module ${pulse_modules[$name]} 2>/dev/null
            unset pulse_modules[$name]
    done
}

pulse_monitor_finished() {
	pulse_service_stopped
}


